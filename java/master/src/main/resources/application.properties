spring.application.name=master
spring.profiles.active=default
spring.config.import=optional:configserver:http://localhost:8888/configurations/

server.port=8091
server.servlet.context-path=/master

## logging.level.root=info
## logging.level.org.springframework = debug
## logging.level.com.metis.nopaper.work=debug
## logging.level.org.hibernate=error
## logging.pattern.console=%d{dd-MM-yyyy HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger.%M - %msg%n
## logging.file.path=logs
## logging.file.name=${logging.file.path}/log-master.log
## logging.pattern.file=%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%M - %msg%n
## logging.logback.rollingpolicy.clean-history-on-start=true



## PostgreSQL
spring.jpa.database=POSTGRESQL
spring.sql.init.platform=postgres
spring.datasource.url=jdbc:postgresql://65.0.103.192:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=saki#nuel

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.properties.hibernate.format_sql=true

# Hibernate ddl auto (create, create-drop, validate, update)
## create OR create-drop options. drop table again, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.default_schema=metis

## To generate the database schema, we'll need to pass the schema generation properties to the persistence provider in use.
## To do this, we'll set the native JPA properties in our configuration file under the spring.jpa.properties prefix
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata

## default connection pool
spring.datasource.hikari.connectionTimeout=200000
spring.datasource.hikari.maximumPoolSize=50
## maximum number of milliseconds that a client will wait for a connection
## spring.datasource.hikari.connection-timeout = 20000

## minimum number of idle connections maintained by HikariCP in a connection pool 
## spring.datasource.hikari.minimum-idle= 10

## maximum pool size
## spring.datasource.hikari.maximum-pool-size= 10

## maximum idle time for connection
## spring.datasource.hikari.idle-timeout=10000

## maximum lifetime in milliseconds of a connection in the pool after it is closed.
## spring.datasource.hikari.max-lifetime= 1000

## default auto-commit behavior.
## spring.datasource.hikari.auto-commit =true

## JWT
#jwt.secret = jxgEQeXHuPq8VdbyYFNkANdudQ53YUn4
#jwt.expirationDateInMs=18000000

## COMMON API PARAM
v1API=/api/v1

## Error
# logging.level.org.springframework=ERROR

## REDIS caching
spring.cache.type = redis
spring.redis.host = 127.0.0.1
spring.redis.port = 6379
spring.redis.timeout = 10000ms
spring.redis.lettuce.pool.max-active = 8
spring.redis.lettuce.pool.max-wait = -1ms
spring.redis.lettuce.pool.max-idle = 8
spring.redis.lettuce.pool.min-idle = 8
spring.cache.redis.time-to-live = 30S
spring.cache.redis.cache-null-values = false
      
      

# spring.data.redis.repositories.enabled=false
# spring.cache.type=redis
# spring.cache.redis.cache-null-values=true
#spring.cache.redis.time-to-live = 30S